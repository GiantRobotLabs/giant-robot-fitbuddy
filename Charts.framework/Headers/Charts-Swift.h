// Generated by Apple Swift version 1.2 (swiftlang-602.0.49.3 clang-clang-602.0.49)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class ChartDataSet;
enum AxisDependency : NSInteger;
@class ChartHighlight;
@class ChartDataEntry;
@class UIColor;
@class NSNumberFormatter;
@class UIFont;

SWIFT_CLASS("_TtC6Charts9ChartData")
@interface ChartData : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSet:(ChartDataSet * __nullable)dataSet;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
- (void)notifyDataChanged;

/// returns the number of LineDataSets this object contains
@property (nonatomic, readonly) NSInteger dataSetCount;

/// returns the smallest y-value the data object contains.
@property (nonatomic, readonly) float yMin;
- (float)getYMin;
- (float)getYMin:(enum AxisDependency)axis;

/// returns the greatest y-value the data object contains.
@property (nonatomic, readonly) float yMax;
- (float)getYMax;
- (float)getYMax:(enum AxisDependency)axis;

/// returns the average length (in characters) across all values in the x-vals array
@property (nonatomic, readonly) float xValAverageLength;

/// returns the total y-value sum across all DataSet objects the this object represents.
@property (nonatomic, readonly) float yValueSum;

/// Returns the total number of y-values across all DataSet objects the this object represents.
@property (nonatomic, readonly) NSInteger yValCount;

/// returns the x-values the chart represents
@property (nonatomic, readonly, copy) NSArray * __nonnull xVals;

/// Adds a new x-value to the chart data.
- (void)addXValue:(NSString * __nonnull)xVal;

/// Removes the x-value at the specified index.
- (void)removeXValue:(NSInteger)index;

/// Returns the array of ChartDataSets this object holds.
@property (nonatomic, copy) NSArray * __nonnull dataSets;

/// returns the total number of x-values this ChartData object represents (the size of the x-values array)
@property (nonatomic, readonly) NSInteger xValCount;

/// Get the Entry for a corresponding highlight object
///
/// \param highlight 
///
/// \returns the entry that is highlighted
- (ChartDataEntry * __nonnull)getEntryForHighlight:(ChartHighlight * __nonnull)highlight;

/// Returns the DataSet object with the given label. 
/// sensitive or not. 
/// IMPORTANT: This method does calculations at runtime. Use with care in performance critical situations.
///
/// \param label 
///
/// \param ignorecase 
- (ChartDataSet * __nullable)getDataSetByLabel:(NSString * __nonnull)label ignorecase:(BOOL)ignorecase;
- (ChartDataSet * __null_unspecified)getDataSetByIndex:(NSInteger)index;
- (void)addDataSet:(ChartDataSet * __null_unspecified)d;
- (void)handleEmptyAxis:(ChartDataSet * __nullable)firstLeft firstRight:(ChartDataSet * __nullable)firstRight;

/// Removes the given DataSet from this data object.
/// Also recalculates all minimum and maximum values.
///
/// \returns true if a DataSet was removed, false if no DataSet could be removed.
- (BOOL)removeDataSet:(ChartDataSet * __null_unspecified)dataSet;

/// Removes the DataSet at the given index in the DataSet array from the data object. 
/// Also recalculates all minimum and maximum values. 
///
/// \returns true if a DataSet was removed, false if no DataSet could be removed.
- (BOOL)removeDataSetByIndex:(NSInteger)index;

/// Adds an Entry to the DataSet at the specified index. Entries are added to the end of the list.
- (void)addEntry:(ChartDataEntry * __nonnull)e dataSetIndex:(NSInteger)dataSetIndex;

/// Removes the given Entry object from the DataSet at the specified index.
- (BOOL)removeEntry:(ChartDataEntry * __null_unspecified)entry dataSetIndex:(NSInteger)dataSetIndex;

/// Removes the Entry object at the given xIndex from the ChartDataSet at the
/// specified index. Returns true if an entry was removed, false if no Entry
/// was found that meets the specified requirements.
- (BOOL)removeEntryByXIndex:(NSInteger)xIndex dataSetIndex:(NSInteger)dataSetIndex;

/// Returns the DataSet that contains the provided Entry, or null, if no DataSet contains this entry.
- (ChartDataSet * __nullable)getDataSetForEntry:(ChartDataEntry * __null_unspecified)e;

/// Returns the index of the provided DataSet inside the DataSets array of
/// this data object. Returns -1 if the DataSet was not found.
- (NSInteger)indexOfDataSet:(ChartDataSet * __nonnull)dataSet;
- (ChartDataSet * __nullable)getFirstLeft;
- (ChartDataSet * __nullable)getFirstRight;

/// Returns all colors used across all DataSet objects this object represents.
- (NSArray * __nullable)getColors;

/// Generates an x-values array filled with numbers in range specified by the parameters. Can be used for convenience.
- (NSArray * __nonnull)generateXVals:(NSInteger)from to:(NSInteger)to;

/// Sets a custom ValueFormatter for all DataSets this data object contains.
- (void)setValueFormatter:(NSNumberFormatter * __null_unspecified)formatter;

/// Sets the color of the value-text (color in which the value-labels are drawn) for all DataSets this data object contains.
- (void)setValueTextColor:(UIColor * __null_unspecified)color;

/// Sets the font for all value-labels for all DataSets this data object contains.
- (void)setValueFont:(UIFont * __null_unspecified)font;

/// Enables / disables drawing values (value-text) for all DataSets this data object contains.
- (void)setDrawValues:(BOOL)enabled;

/// Clears this data object from all DataSets and removes all Entries.
/// Don't forget to invalidate the chart after this.
- (void)clearValues;

/// Checks if this data object contains the specified Entry. Returns true if so, false if not.
- (BOOL)containsWithEntry:(ChartDataEntry * __nonnull)entry;

/// Checks if this data object contains the specified DataSet. Returns true if so, false if not.
- (BOOL)containsWithDataSet:(ChartDataSet * __nonnull)dataSet;
@end


SWIFT_CLASS("_TtC6Charts29BarLineScatterCandleChartData")
@interface BarLineScatterCandleChartData : ChartData
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts12BarChartData")
@interface BarChartData : BarLineScatterCandleChartData

/// The spacing is relative to a full bar width
@property (nonatomic) CGFloat groupSpace;

/// Returns true if this BarData object contains grouped DataSets (more than 1 DataSet).
@property (nonatomic, readonly) BOOL isGrouped;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts14ChartDataEntry")
@interface ChartDataEntry : NSObject

/// the actual value (y axis)
@property (nonatomic) float value;

/// the index on the x-axis
@property (nonatomic) NSInteger xIndex;

/// optional spot for additional data this Entry represents
@property (nonatomic) id __nullable data;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValue:(float)value xIndex:(NSInteger)xIndex OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValue:(float)value xIndex:(NSInteger)xIndex data:(id __nullable)data OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id __nullable)object;
@property (nonatomic, readonly, copy, getter=description) NSString * __nonnull description;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts17BarChartDataEntry")
@interface BarChartDataEntry : ChartDataEntry

/// the values the stacked barchart holds
@property (nonatomic, copy) NSArray * __null_unspecified values;

/// Constructor for stacked bar entries.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValues:(NSArray * __nonnull)values xIndex:(NSInteger)xIndex OBJC_DESIGNATED_INITIALIZER;

/// Constructor for normal bars (not stacked).
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValue:(float)value xIndex:(NSInteger)xIndex OBJC_DESIGNATED_INITIALIZER;

/// Constructor for stacked bar entries.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValues:(NSArray * __nonnull)values xIndex:(NSInteger)xIndex label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// Constructor for normal bars (not stacked).
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValue:(float)value xIndex:(NSInteger)xIndex data:(id __nullable)data OBJC_DESIGNATED_INITIALIZER;

/// Returns the closest value inside the values array (for stacked barchart)
/// to the value given as a parameter. The closest value must be higher
/// (above) the provided value.
- (NSInteger)getClosestIndexAbove:(float)value;
- (float)getBelowSum:(NSInteger)stackIndex;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts12ChartDataSet")
@interface ChartDataSet : NSObject
@property (nonatomic, copy) NSArray * __nonnull colors;
@property (nonatomic, copy) NSString * __nonnull label;
@property (nonatomic) BOOL visible;
@property (nonatomic) BOOL drawValuesEnabled;

/// the color used for the value-text
@property (nonatomic) UIColor * __nonnull valueTextColor;

/// the font for the value-text labels
@property (nonatomic) UIFont * __nonnull valueFont;

/// the formatter used to customly format the values
@property (nonatomic) NSNumberFormatter * __nullable valueFormatter;

/// the axis this DataSet should be plotted against.
@property (nonatomic) enum AxisDependency axisDependency;
@property (nonatomic, readonly, copy) NSArray * __nonnull yVals;
@property (nonatomic, readonly) float yValueSum;
@property (nonatomic, readonly) float yMin;
@property (nonatomic, readonly) float yMax;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals;

/// Use this method to tell the data set that the underlying data has changed
- (void)notifyDataSetChanged;
@property (nonatomic, readonly) NSInteger entryCount;
- (float)yValForXIndex:(NSInteger)x;

/// Returns the first Entry object found at the given xIndex with binary search. 
/// If the no Entry at the specifed x-index is found, this method returns the Entry at the closest x-index. 
/// Returns nil if no Entry object at that index.
- (ChartDataEntry * __null_unspecified)entryForXIndex:(NSInteger)x;
- (NSArray * __nonnull)entriesForXIndex:(NSInteger)x;
- (NSInteger)entryIndexWithXIndex:(NSInteger)x;
- (NSInteger)entryIndexWithEntry:(ChartDataEntry * __nonnull)e isEqual:(BOOL)isEqual;

/// Returns the number of entries this DataSet holds.
@property (nonatomic, readonly) NSInteger valueCount;
- (void)addEntry:(ChartDataEntry * __nonnull)e;
- (BOOL)removeEntry:(ChartDataEntry * __nonnull)entry;
- (BOOL)removeEntryWithXIndex:(NSInteger)xIndex;
- (void)resetColors;
- (void)addColor:(UIColor * __nonnull)color;
- (void)setColor:(UIColor * __nonnull)color;
@property (nonatomic, readonly) BOOL isVisible;
@property (nonatomic, readonly) BOOL isDrawValuesEnabled;

/// Checks if this DataSet contains the specified Entry. 
/// :returns: true if contains the entry, false if not. 
- (BOOL)contains:(ChartDataEntry * __nonnull)e;

/// Removes all values from this DataSet and recalculates min and max value.
- (void)clear;
@property (nonatomic, readonly, copy, getter=description) NSString * __nonnull description;
@property (nonatomic, readonly, copy, getter=debugDescription) NSString * __nonnull debugDescription;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts32BarLineScatterCandleChartDataSet")
@interface BarLineScatterCandleChartDataSet : ChartDataSet
@property (nonatomic) UIColor * __nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray * __nullable highlightLineDashLengths;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts15BarChartDataSet")
@interface BarChartDataSet : BarLineScatterCandleChartDataSet

/// space indicator between the bars in percentage of the whole width of one value (0.15 == 15% of bar width)
@property (nonatomic) CGFloat barSpace;

/// the color used for drawing the bar-shadows. The bar shadows is a surface behind the bar that indicates the maximum value
@property (nonatomic) UIColor * __nonnull barShadowColor;

/// the alpha value (transparency) that is used for drawing the highlight indicator bar. min = 0.0 (fully transparent), max = 1.0 (fully opaque)
@property (nonatomic) CGFloat highLightAlpha;

/// array of labels used to describe the different values of the stacked bars
@property (nonatomic, copy) NSArray * __nonnull stackLabels;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;

/// Returns the maximum number of bars that can be stacked upon another in this DataSet.
@property (nonatomic, readonly) NSInteger stackSize;

/// Returns true if this DataSet is stacked (stacksize > 1) or not.
@property (nonatomic, readonly) BOOL isStacked;

/// returns the overall entry count, including counting each stack-value individually
@property (nonatomic, readonly) NSInteger entryCountStacks;
@end

@class BarLineChartViewBase;

SWIFT_CLASS("_TtC6Charts17ChartRendererBase")
@interface ChartRendererBase : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Calculates the minimum and maximum x-value the chart can currently display (with the given zoom level).
- (void)calcXBoundsWithChart:(BarLineChartViewBase * __nonnull)chart xAxisModulus:(NSInteger)xAxisModulus;
@end


SWIFT_CLASS("_TtC6Charts21ChartDataRendererBase")
@interface ChartDataRendererBase : ChartRendererBase
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end

@protocol BarChartRendererDelegate;

SWIFT_CLASS("_TtC6Charts16BarChartRenderer")
@interface BarChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) id <BarChartRendererDelegate> __nullable delegate;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end

@class ChartTransformer;

SWIFT_PROTOCOL("_TtP6Charts24BarChartRendererDelegate_")
@protocol BarChartRendererDelegate
- (BarChartData * __null_unspecified)barChartRendererData:(BarChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)barChartRenderer:(BarChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSInteger)barChartRendererMaxVisibleValueCount:(BarChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)barChartDefaultRendererValueFormatter:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMin:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMin:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawHighlightArrowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValueAboveBarEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValuesForWholeStackEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawBarShadowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsInverted:(BarChartRenderer * __nonnull)renderer axis:(enum AxisDependency)axis;
@end

@class ChartAnimator;

SWIFT_PROTOCOL("_TtP6Charts21ChartAnimatorDelegate_")
@protocol ChartAnimatorDelegate

/// Called when the Animator has stepped.
- (void)chartAnimatorUpdated:(ChartAnimator * __nonnull)chartAnimator;

/// Called when the Animator has stopped.
- (void)chartAnimatorStopped:(ChartAnimator * __nonnull)chartAnimator;
@end

@class ChartMarker;
@class NSCoder;
enum ChartEasingOption : NSInteger;
@class ChartLegend;
@class ChartLegendRenderer;
@class UIImage;
@class UIEvent;
@protocol ChartViewDelegate;

SWIFT_CLASS("_TtC6Charts13ChartViewBase")
@interface ChartViewBase : UIView <ChartAnimatorDelegate>

/// If set to true, chart continues to scroll after touch up
@property (nonatomic) BOOL dragDecelerationEnabled;

/// font object used for drawing the description text in the bottom right corner of the chart
@property (nonatomic) UIFont * __nullable descriptionFont;
@property (nonatomic) UIColor * __null_unspecified descriptionTextColor;

/// font object for drawing the information text when there are no values in the chart
@property (nonatomic) UIFont * __null_unspecified infoFont;
@property (nonatomic) UIColor * __null_unspecified infoTextColor;

/// description text that appears in the bottom right corner of the chart
@property (nonatomic, copy) NSString * __nonnull descriptionText;

/// if true, value highlightning is enabled
@property (nonatomic) BOOL highlightEnabled;

/// delegate to receive chart events
@property (nonatomic, weak) id <ChartViewDelegate> __nullable delegate;

/// text that is displayed when the chart is empty
@property (nonatomic, copy) NSString * __nonnull noDataText;

/// text that is displayed when the chart is empty that describes why the chart is empty
@property (nonatomic, copy) NSString * __nullable noDataTextDescription;

/// object responsible for rendering the data
@property (nonatomic) ChartDataRendererBase * __nullable renderer;

/// if set to true, the marker is drawn when a value is clicked
@property (nonatomic) BOOL drawMarkers;

/// the view that represents the marker
@property (nonatomic) ChartMarker * __nullable marker;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// The data for the chart
@property (nonatomic) ChartData * __nullable data;

/// Clears the chart from all data (sets it to null) and refreshes it (by calling setNeedsDisplay()).
- (void)clear;

/// Removes all DataSets (and thereby Entries) from the chart. Does not remove the x-values. Also refreshes the chart by calling setNeedsDisplay().
- (void)clearValues;

/// Returns true if the chart is empty (meaning it's data object is either null or contains no entries).
- (BOOL)isEmpty;

/// Lets the chart know its underlying data has changed and should perform all necessary recalculations.
- (void)notifyDataSetChanged;
- (void)drawRect:(CGRect)rect;

/// Returns the array of currently highlighted values. This might be null or empty if nothing is highlighted.
@property (nonatomic, readonly, copy) NSArray * __nonnull highlighted;

/// Returns true if there are values to highlight,
/// false if there are no values to highlight.
/// Checks if the highlight array is null, has a length of zero or if the first object is null.
- (BOOL)valuesToHighlight;

/// Highlights the values at the given indices in the given DataSets. Provide
/// null or an empty array to undo all highlighting. 
/// This should be used to programmatically highlight values. 
/// This DOES NOT generate a callback to the delegate.
- (void)highlightValues:(NSArray * __nullable)highs;

/// Highlights the value at the given x-index in the given DataSet. 
/// Provide -1 as the x-index to undo all highlighting.
- (void)highlightValueWithXIndex:(NSInteger)xIndex dataSetIndex:(NSInteger)dataSetIndex callDelegate:(BOOL)callDelegate;

/// Highlights the value selected by touch gesture.
- (void)highlightValueWithHighlight:(ChartHighlight * __nullable)highlight callDelegate:(BOOL)callDelegate;

/// Returns the actual position in pixels of the MarkerView for the given Entry in the given DataSet.
- (CGPoint)getMarkerPositionWithEntry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;

/// Returns the animator responsible for animating chart values.
@property (nonatomic, readonly) ChartAnimator * __null_unspecified animator;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingX an easing function for the animation on the x axis
/// :param: easingY an easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingX:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easingX easingY:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easingY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOptionX the easing function for the animation on the x axis
/// :param: easingOptionY the easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOptionX:(enum ChartEasingOption)easingOptionX easingOptionY:(enum ChartEasingOption)easingOptionY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
/// :param: easing an easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOption the easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration;

/// returns the total value (sum) of all y-values across all DataSets
@property (nonatomic, readonly) float yValueSum;

/// returns the current y-max value across all DataSets
@property (nonatomic, readonly) float chartYMax;

/// returns the current y-min value across all DataSets
@property (nonatomic, readonly) float chartYMin;
@property (nonatomic, readonly) float chartXMax;
@property (nonatomic, readonly) float chartXMin;

/// returns the average value of all values the chart holds
- (float)getAverage;

/// returns the average value for a specific DataSet (with a specific label) in the chart
- (float)getAverageWithDataSetLabel:(NSString * __nonnull)dataSetLabel;

/// returns the total number of values the chart holds (across all DataSets)
@property (nonatomic, readonly) NSInteger getValueCount;

/// Returns the center of the chart taking offsets under consideration. (returns the center of the content rectangle)
@property (nonatomic, readonly) CGPoint centerOffsets;

/// Returns the Legend object of the chart. This method can be used to get an instance of the legend in order to customize the automatically generated Legend.
@property (nonatomic, readonly) ChartLegend * __nonnull legend;

/// Returns the renderer object responsible for rendering / drawing the Legend.
@property (nonatomic, readonly) ChartLegendRenderer * __null_unspecified legendRenderer;

/// Returns the rectangle that defines the borders of the chart-value surface (into which the actual values are drawn).
@property (nonatomic, readonly) CGRect contentRect;

/// Sets the formatter to be used for drawing the values inside the chart.
/// If no formatter is set, the chart will automatically determine a reasonable
/// formatting (concerning decimals) for all the values that are drawn inside
/// the chart. Set this to nil to re-enable auto formatting.
@property (nonatomic) NSNumberFormatter * __null_unspecified valueFormatter;

/// returns the x-value at the given index
- (NSString * __null_unspecified)getXValue:(NSInteger)index;

/// Get all Entry objects at the given index across all DataSets.
- (NSArray * __nonnull)getEntriesAtIndex:(NSInteger)xIndex;

/// returns the percentage the given value has of the total y-value sum
- (float)percentOfTotal:(float)val;

/// Returns the bitmap that represents the chart.
- (UIImage * __nonnull)getChartImageWithTransparent:(BOOL)transparent;

/// Saves the current state of the chart to the camera roll
- (void)saveToCameraRoll;
- (void)observeValueForKeyPath:(NSString * __nonnull)keyPath ofObject:(id __nonnull)object change:(NSDictionary * __nonnull)change context:(void * __null_unspecified)context;
- (void)clearPendingViewPortChanges;

/// if true, value highlightning is enabled
@property (nonatomic, readonly) BOOL isHighlightEnabled;

/// <dl><dt>default</dt><dd><p>true</p></dd></dl>
/// \returns true if chart continues to scroll after touch up, false if not.
@property (nonatomic, readonly) BOOL isDragDecelerationEnabled;

/// Deceleration friction coefficient in [0 ; 1] interval, higher values indicate that speed will decrease slowly, for example if it set to 0, it will stop immediately.
/// 1 is an invalid value, and will be converted to 0.999 automatically.
/// :default: true
@property (nonatomic) CGFloat dragDecelerationFrictionCoef;
- (void)chartAnimatorUpdated:(ChartAnimator * __nonnull)chartAnimator;
- (void)chartAnimatorStopped:(ChartAnimator * __nonnull)chartAnimator;
- (void)touchesBegan:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesMoved:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesEnded:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesCancelled:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
@end

@class UIGestureRecognizer;
@class ChartSelInfo;
@class ChartYAxis;
@class ChartXAxis;
@class ChartXAxisRenderer;
@class ChartYAxisRenderer;


/// Base-class of LineChart, BarChart, ScatterChart and CandleStickChart.
SWIFT_CLASS("_TtC6Charts20BarLineChartViewBase")
@interface BarLineChartViewBase : ChartViewBase <UIGestureRecognizerDelegate>

/// the color for the background of the chart-drawing area (everything behind the grid lines).
@property (nonatomic) UIColor * __nonnull gridBackgroundColor;
@property (nonatomic) UIColor * __nonnull borderColor;
@property (nonatomic) CGFloat borderLineWidth;

/// flag indicating if the grid background should be drawn or not
@property (nonatomic) BOOL drawGridBackgroundEnabled;

/// Sets drawing the borders rectangle to true. If this is enabled, there is no point drawing the axis-lines of x- and y-axis.
@property (nonatomic) BOOL drawBordersEnabled;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)notifyDataSetChanged;
- (CGPoint)getMarkerPositionWithEntry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;

/// Returns the Transformer class that contains all matrices and is
/// responsible for transforming values into pixels on the screen and
/// backwards.
- (ChartTransformer * __nonnull)getTransformer:(enum AxisDependency)which;
- (void)stopDeceleration;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * __nonnull)gestureRecognizer;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * __nonnull)otherGestureRecognizer;

/// MARK: Viewport modifiers
/// Zooms in by 1.4f, into the charts center. center.
- (void)zoomIn;

/// Zooms out by 0.7f, from the charts center. center.
- (void)zoomOut;

/// Zooms in or out by the given scale factor. x and y are the coordinates
/// (in pixels) of the zoom center.
///
/// \param scaleX if < 1f --> zoom out, if > 1f --> zoom in
///
/// \param scaleY if < 1f --> zoom out, if > 1f --> zoom in
///
/// \param x 
///
/// \param y 
- (void)zoom:(CGFloat)scaleX scaleY:(CGFloat)scaleY x:(CGFloat)x y:(CGFloat)y;

/// Resets all zooming and dragging and makes the chart fit exactly it's bounds.
- (void)fitScreen;

/// Sets the minimum scale value to which can be zoomed out. 1f = fitScreen
- (void)setScaleMinima:(CGFloat)scaleX scaleY:(CGFloat)scaleY;

/// Sets the size of the area (range on the x-axis) that should be maximum
/// visible at once. If this is e.g. set to 10, no more than 10 values on the
/// x-axis can be viewed at once without scrolling.
- (void)setVisibleXRange:(CGFloat)xRange;

/// Sets the size of the area (range on the y-axis) that should be maximum visible at once.
///
/// \param yRange 
///
/// \param axis - the axis for which this limit should apply
- (void)setVisibleYRange:(CGFloat)yRange axis:(enum AxisDependency)axis;

/// Moves the left side of the current viewport to the specified x-index.
- (void)moveViewToX:(NSInteger)xIndex;

/// Centers the viewport to the specified y-value on the y-axis.
///
/// \param yValue 
///
/// \param axis - which axis should be used as a reference for the y-axis
- (void)moveViewToY:(CGFloat)yValue axis:(enum AxisDependency)axis;

/// This will move the left side of the current viewport to the specified x-index on the x-axis, and center the viewport to the specified y-value on the y-axis.
///
/// \param xIndex 
///
/// \param yValue 
///
/// \param axis - which axis should be used as a reference for the y-axis
- (void)moveViewToXIndex:(NSInteger)xIndex yValue:(CGFloat)yValue axis:(enum AxisDependency)axis;

/// This will move the center of the current viewport to the specified x-index and y-value.
///
/// \param xIndex 
///
/// \param yValue 
///
/// \param axis - which axis should be used as a reference for the y-axis
- (void)centerViewToXIndex:(NSInteger)xIndex yValue:(CGFloat)yValue axis:(enum AxisDependency)axis;

/// Sets custom offsets for the current ViewPort (the offsets on the sides of the actual chart window). Setting this will prevent the chart from automatically calculating it's offsets. Use resetViewPortOffsets() to undo this.
- (void)setViewPortOffsetsWithLeft:(CGFloat)left top:(CGFloat)top right:(CGFloat)right bottom:(CGFloat)bottom;

/// Resets all custom offsets set via setViewPortOffsets(...) method. Allows the chart to again calculate all offsets automatically.
- (void)resetViewPortOffsets;

/// Returns the delta-y value (y-value range) of the specified axis.
- (CGFloat)getDeltaY:(enum AxisDependency)axis;

/// Returns the position (in pixels) the provided Entry has inside the chart view
- (CGPoint)getPosition:(ChartDataEntry * __nonnull)e axis:(enum AxisDependency)axis;

/// the number of maximum visible drawn values on the chart
/// only active when setDrawValues() is enabled
@property (nonatomic) NSInteger maxVisibleValueCount;

/// is dragging enabled? (moving the chart with the finger) for the chart (this does not affect scaling).
@property (nonatomic) BOOL dragEnabled;

/// is dragging enabled? (moving the chart with the finger) for the chart (this does not affect scaling).
@property (nonatomic, readonly) BOOL isDragEnabled;

/// is scaling enabled? (zooming in and out by gesture) for the chart (this does not affect dragging).
- (void)setScaleEnabled:(BOOL)enabled;
@property (nonatomic) BOOL scaleXEnabled;
@property (nonatomic) BOOL scaleYEnabled;
@property (nonatomic, readonly) BOOL isScaleXEnabled;
@property (nonatomic, readonly) BOOL isScaleYEnabled;

/// flag that indicates if double tap zoom is enabled or not
@property (nonatomic) BOOL doubleTapToZoomEnabled;

/// <dl><dt>default</dt><dd><p>true</p></dd></dl>
/// \returns true if zooming via double-tap is enabled false if not.
@property (nonatomic, readonly) BOOL isDoubleTapToZoomEnabled;

/// flag that indicates if highlighting per dragging over a fully zoomed out chart is enabled
@property (nonatomic) BOOL highlightPerDragEnabled;

/// If set to true, highlighting per dragging over a fully zoomed out chart is enabled
/// You might want to disable this when using inside a UIScrollView
/// :default: true
@property (nonatomic, readonly) BOOL isHighlightPerDragEnabled;

/// if set to true, the highlight indicator (lines for linechart, dark bar for barchart) will be drawn upon selecting values.
@property (nonatomic) BOOL highlightIndicatorEnabled;

/// If set to true, the highlight indicator (vertical line for LineChart and
/// ScatterChart, dark bar overlay for BarChart) that gives visual indication
/// that an Entry has been selected will be drawn upon selecting values. This
/// does not depend on the MarkerView.
/// :default: true
@property (nonatomic, readonly) BOOL isHighlightIndicatorEnabled;

/// <dl><dt>default</dt><dd><p>true</p></dd></dl>
/// \returns true if drawing the grid background is enabled, false if not.
@property (nonatomic, readonly) BOOL isDrawGridBackgroundEnabled;

/// <dl><dt>default</dt><dd><p>false</p></dd></dl>
/// \returns true if drawing the borders rectangle is enabled, false if not.
@property (nonatomic, readonly) BOOL isDrawBordersEnabled;

/// Returns an array of SelInfo objects for the given x-index. The SelInfo
/// objects give information about the value at the selected index and the
/// DataSet it belongs to. 
- (NSArray * __nonnull)getYValsAtIndex:(NSInteger)xIndex;

/// Transforms the given chart values into pixels. This is the opposite
/// method to getValueByTouchPoint(...).
- (CGPoint)getPixelForValue:(float)x y:(float)y axis:(enum AxisDependency)axis;

/// returns the y-value at the given touch position (must not necessarily be
/// a value contained in one of the datasets)
- (CGFloat)getYValueByTouchPointWithPt:(CGPoint)pt axis:(enum AxisDependency)axis;

/// returns the Entry object displayed at the touched position of the chart
- (ChartDataEntry * __null_unspecified)getEntryByTouchPoint:(CGPoint)pt;

/// returns the DataSet object displayed at the touched position of the chart
- (BarLineScatterCandleChartDataSet * __null_unspecified)getDataSetByTouchPoint:(CGPoint)pt;

/// Returns the lowest x-index (value on the x-axis) that is still visible on he chart.
@property (nonatomic, readonly) NSInteger lowestVisibleXIndex;

/// Returns the highest x-index (value on the x-axis) that is still visible on the chart.
@property (nonatomic, readonly) NSInteger highestVisibleXIndex;

/// returns the current x-scale factor
@property (nonatomic, readonly) CGFloat scaleX;

/// returns the current y-scale factor
@property (nonatomic, readonly) CGFloat scaleY;

/// if the chart is fully zoomed out, return true
@property (nonatomic, readonly) BOOL isFullyZoomedOut;

/// Returns the left y-axis object. In the horizontal bar-chart, this is the
/// top axis.
@property (nonatomic, readonly) ChartYAxis * __nonnull leftAxis;

/// Returns the right y-axis object. In the horizontal bar-chart, this is the
/// bottom axis.
@property (nonatomic, readonly) ChartYAxis * __nonnull rightAxis;

/// Returns the y-axis object to the corresponding AxisDependency. In the
/// horizontal bar-chart, LEFT == top, RIGHT == BOTTOM
- (ChartYAxis * __nonnull)getAxis:(enum AxisDependency)axis;

/// Returns the object representing all x-labels, this method can be used to
/// acquire the XAxis object and modify it (e.g. change the position of the
/// labels)
@property (nonatomic, readonly) ChartXAxis * __nonnull xAxis;

/// flag that indicates if pinch-zoom is enabled. if true, both x and y axis can be scaled with 2 fingers, if false, x and y axis can be scaled separately
@property (nonatomic) BOOL pinchZoomEnabled;

/// returns true if pinch-zoom is enabled, false if not
/// :default: false
@property (nonatomic, readonly) BOOL isPinchZoomEnabled;

/// Set an offset in dp that allows the user to drag the chart over it's
/// bounds on the x-axis.
- (void)setDragOffsetX:(CGFloat)offset;

/// Set an offset in dp that allows the user to drag the chart over it's
/// bounds on the y-axis.
- (void)setDragOffsetY:(CGFloat)offset;

/// \returns true if both drag offsets (x and y) are zero or smaller.
@property (nonatomic, readonly) BOOL hasNoDragOffset;
@property (nonatomic, readonly) ChartXAxisRenderer * __nonnull xAxisRenderer;
@property (nonatomic, readonly) ChartYAxisRenderer * __nonnull leftYAxisRenderer;
@property (nonatomic, readonly) ChartYAxisRenderer * __nonnull rightYAxisRenderer;
@property (nonatomic, readonly) float chartYMax;
@property (nonatomic, readonly) float chartYMin;

/// Returns true if either the left or the right or both axes are inverted.
@property (nonatomic, readonly) BOOL isAnyAxisInverted;
@end



/// Chart that draws bars.
SWIFT_CLASS("_TtC6Charts12BarChartView")
@interface BarChartView : BarLineChartViewBase <BarChartRendererDelegate>
@property (nonatomic, readonly) NSInteger lowestVisibleXIndex;
@property (nonatomic, readonly) NSInteger highestVisibleXIndex;

/// flag that enables or disables the highlighting arrow
@property (nonatomic) BOOL drawHighlightArrowEnabled;

/// if set to true, all values are drawn above their bars, instead of below their top
@property (nonatomic) BOOL drawValueAboveBarEnabled;

/// if set to true, all values of a stack are drawn individually, and not just their sum
@property (nonatomic) BOOL drawValuesForWholeStackEnabled;

/// if set to true, a grey area is drawn behind each bar that indicates the maximum value
@property (nonatomic) BOOL drawBarShadowEnabled;

/// returns true if drawing the highlighting arrow is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawHighlightArrowEnabled;

/// returns true if drawing values above bars is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawValueAboveBarEnabled;

/// returns true if all values of a stack are drawn, and not just their sum
@property (nonatomic, readonly) BOOL isDrawValuesForWholeStackEnabled;

/// returns true if drawing shadows (maxvalue) for each bar is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawBarShadowEnabled;
- (BarChartData * __null_unspecified)barChartRendererData:(BarChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)barChartRenderer:(BarChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSInteger)barChartRendererMaxVisibleValueCount:(BarChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)barChartDefaultRendererValueFormatter:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMin:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMin:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawHighlightArrowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValueAboveBarEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValuesForWholeStackEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawBarShadowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsInverted:(BarChartRenderer * __nonnull)renderer axis:(enum AxisDependency)axis;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC6Charts15BubbleChartData")
@interface BubbleChartData : BarLineScatterCandleChartData

/// Sets the width of the circle that surrounds the bubble when highlighted for all DataSet objects this data object contains
- (void)setHighlightCircleWidth:(CGFloat)width;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts20BubbleChartDataEntry")
@interface BubbleChartDataEntry : ChartDataEntry

/// The size of the bubble.
@property (nonatomic) CGFloat size;

/// <dl><dt>xIndex</dt><dd><p>The index on the x-axis.</p></dd></dl>
/// <dl><dt>val</dt><dd><p>The value on the y-axis.</p></dd></dl>
/// <dl><dt>size</dt><dd><p>The size of the bubble.</p></dd></dl>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)xIndex value:(float)value size:(CGFloat)size OBJC_DESIGNATED_INITIALIZER;

/// <dl><dt>xIndex</dt><dd><p>The index on the x-axis.</p></dd></dl>
/// <dl><dt>val</dt><dd><p>The value on the y-axis.</p></dd></dl>
/// <dl><dt>size</dt><dd><p>The size of the bubble.</p></dd></dl>
/// <dl><dt>data</dt><dd><p>Spot for additional data this Entry represents.</p></dd></dl>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)xIndex value:(float)value size:(CGFloat)size data:(id __nullable)data OBJC_DESIGNATED_INITIALIZER;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts18BubbleChartDataSet")
@interface BubbleChartDataSet : BarLineScatterCandleChartDataSet
@property (nonatomic, readonly) float xMin;
@property (nonatomic, readonly) float xMax;
@property (nonatomic, readonly) CGFloat maxSize;
- (void)setColor:(UIColor * __nonnull)color alpha:(CGFloat)alpha;

/// Sets/gets the width of the circle that surrounds the bubble when highlighted
@property (nonatomic) CGFloat highlightCircleWidth;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BubbleChartRendererDelegate;

SWIFT_CLASS("_TtC6Charts19BubbleChartRenderer")
@interface BubbleChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) id <BubbleChartRendererDelegate> __nullable delegate;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end


SWIFT_PROTOCOL("_TtP6Charts27BubbleChartRendererDelegate_")
@protocol BubbleChartRendererDelegate
- (BubbleChartData * __null_unspecified)bubbleChartRendererData:(BubbleChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)bubbleChartRenderer:(BubbleChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)bubbleChartDefaultRendererValueFormatter:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMin:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMin:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererMaxVisibleValueCount:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererXValCount:(BubbleChartRenderer * __nonnull)renderer;
@end


SWIFT_CLASS("_TtC6Charts15BubbleChartView")
@interface BubbleChartView : BarLineChartViewBase <BubbleChartRendererDelegate>
- (void)initialize;
- (void)calcMinMax;
- (BubbleChartData * __null_unspecified)bubbleChartRendererData:(BubbleChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)bubbleChartRenderer:(BubbleChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)bubbleChartDefaultRendererValueFormatter:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMin:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMin:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererMaxVisibleValueCount:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererXValCount:(BubbleChartRenderer * __nonnull)renderer;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts15CandleChartData")
@interface CandleChartData : BarLineScatterCandleChartData
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts20CandleChartDataEntry")
@interface CandleChartDataEntry : ChartDataEntry

/// shadow-high value
@property (nonatomic) float high;

/// shadow-low value
@property (nonatomic) float low;

/// close value
@property (nonatomic) float close;

/// open value
@property (nonatomic) float open;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)xIndex shadowH:(float)shadowH shadowL:(float)shadowL open:(float)open close:(float)close OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)xIndex shadowH:(float)shadowH shadowL:(float)shadowL open:(float)open close:(float)close data:(id __nullable)data OBJC_DESIGNATED_INITIALIZER;

/// Returns the overall range (difference) between shadow-high and shadow-low.
@property (nonatomic, readonly) float shadowRange;

/// Returns the body size (difference between open and close).
@property (nonatomic, readonly) float bodyRange;

/// the center value of the candle. (Middle value between high and low)
@property (nonatomic) float value;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts18CandleChartDataSet")
@interface CandleChartDataSet : BarLineScatterCandleChartDataSet

/// the width of the candle-shadow-line in pixels. 
/// :default: 3.0
@property (nonatomic) CGFloat shadowWidth;

/// the color of the shadow line
@property (nonatomic) UIColor * __nullable shadowColor;

/// color for open <= close
@property (nonatomic) UIColor * __nullable decreasingColor;

/// color for open > close
@property (nonatomic) UIColor * __nullable increasingColor;

/// Are decreasing values drawn as filled?
@property (nonatomic) BOOL decreasingFilled;

/// Are increasing values drawn as filled?
@property (nonatomic) BOOL increasingFilled;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// the space that is left out on the left and right side of each candle,
/// :default: 0.1 (10%), max 0.45, min 0.0
@property (nonatomic) CGFloat bodySpace;

/// Are increasing values drawn as filled?
@property (nonatomic, readonly) BOOL isIncreasingFilled;

/// Are decreasing values drawn as filled?
@property (nonatomic, readonly) BOOL isDecreasingFilled;
@end

@protocol CandleStickChartRendererDelegate;

SWIFT_CLASS("_TtC6Charts24CandleStickChartRenderer")
@interface CandleStickChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) id <CandleStickChartRendererDelegate> __nullable delegate;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end


SWIFT_PROTOCOL("_TtP6Charts32CandleStickChartRendererDelegate_")
@protocol CandleStickChartRendererDelegate
- (CandleChartData * __null_unspecified)candleStickChartRendererCandleData:(CandleStickChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)candleStickChartRenderer:(CandleStickChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)candleStickChartDefaultRendererValueFormatter:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMin:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMin:(CandleStickChartRenderer * __nonnull)renderer;
- (NSInteger)candleStickChartRendererMaxVisibleValueCount:(CandleStickChartRenderer * __nonnull)renderer;
@end



/// Financial chart type that draws candle-sticks.
SWIFT_CLASS("_TtC6Charts20CandleStickChartView")
@interface CandleStickChartView : BarLineChartViewBase <CandleStickChartRendererDelegate>
- (CandleChartData * __null_unspecified)candleStickChartRendererCandleData:(CandleStickChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)candleStickChartRenderer:(CandleStickChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)candleStickChartDefaultRendererValueFormatter:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMin:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMin:(CandleStickChartRenderer * __nonnull)renderer;
- (NSInteger)candleStickChartRendererMaxVisibleValueCount:(CandleStickChartRenderer * __nonnull)renderer;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts13ChartAnimator")
@interface ChartAnimator : NSObject
@property (nonatomic, weak) id <ChartAnimatorDelegate> __nullable delegate;
@property (nonatomic, copy) void (^ __nullable updateBlock)(void);
@property (nonatomic, copy) void (^ __nullable stopBlock)(void);

/// the phase that is animated and influences the drawn values on the y-axis
@property (nonatomic) CGFloat phaseX;

/// the phase that is animated and influences the drawn values on the y-axis
@property (nonatomic) CGFloat phaseY;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)stop;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingX an easing function for the animation on the x axis
/// :param: easingY an easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingX:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easingX easingY:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easingY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOptionX the easing function for the animation on the x axis
/// :param: easingOptionY the easing function for the animation on the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOptionX:(enum ChartEasingOption)easingOptionX easingOptionY:(enum ChartEasingOption)easingOptionY;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart on both x- and y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: yAxisDuration duration for animating the y axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration yAxisDuration:(NSTimeInterval)yAxisDuration;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: easing an easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
/// :param: easingOption the easing function for the animation
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the x-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: xAxisDuration duration for animating the x axis
- (void)animateWithXAxisDuration:(NSTimeInterval)xAxisDuration;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
/// :param: easing an easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
/// :param: easingOption the easing function for the animation
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration easingOption:(enum ChartEasingOption)easingOption;

/// Animates the drawing / rendering of the chart the y-axis with the specified animation time.
/// If animate(...) is called, no further calling of invalidate() is necessary to refresh the chart.
/// :param: yAxisDuration duration for animating the y axis
- (void)animateWithYAxisDuration:(NSTimeInterval)yAxisDuration;
@end




/// This class encapsulates everything both Axis and Legend have in common.
SWIFT_CLASS("_TtC6Charts18ChartComponentBase")
@interface ChartComponentBase : NSObject

/// flag that indicates if this component is enabled or not
@property (nonatomic) BOOL enabled;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isEnabled;
@end

@class ChartLimitLine;

SWIFT_CLASS("_TtC6Charts13ChartAxisBase")
@interface ChartAxisBase : ChartComponentBase
@property (nonatomic) UIFont * __nonnull labelFont;
@property (nonatomic) UIColor * __nonnull labelTextColor;
@property (nonatomic) UIColor * __nonnull axisLineColor;
@property (nonatomic) CGFloat axisLineWidth;
@property (nonatomic) CGFloat axisLineDashPhase;
@property (nonatomic, copy) NSArray * __null_unspecified axisLineDashLengths;
@property (nonatomic) UIColor * __nonnull gridColor;
@property (nonatomic) CGFloat gridLineWidth;
@property (nonatomic) CGFloat gridLineDashPhase;
@property (nonatomic, copy) NSArray * __null_unspecified gridLineDashLengths;
@property (nonatomic) BOOL drawGridLinesEnabled;
@property (nonatomic) BOOL drawAxisLineEnabled;

/// flag that indicates of the labels of this axis should be drawn or not
@property (nonatomic) BOOL drawLabelsEnabled;
@property (nonatomic) CGFloat xOffset;
@property (nonatomic) CGFloat yOffset;

/// Are the LimitLines drawn behind the data or in front of the data?
/// :default: false
@property (nonatomic) BOOL drawLimitLinesBehindDataEnabled;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * __nonnull)getLongestLabel;
@property (nonatomic, readonly) BOOL isDrawGridLinesEnabled;
@property (nonatomic, readonly) BOOL isDrawAxisLineEnabled;
@property (nonatomic, readonly) BOOL isDrawLabelsEnabled;

/// Are the LimitLines drawn behind the data or in front of the data?
/// :default: false
@property (nonatomic, readonly) BOOL isDrawLimitLinesBehindDataEnabled;

/// Adds a new ChartLimitLine to this axis.
- (void)addLimitLine:(ChartLimitLine * __nonnull)line;

/// Removes the specified ChartLimitLine from the axis.
- (void)removeLimitLine:(ChartLimitLine * __nonnull)line;

/// Removes all LimitLines from the axis.
- (void)removeAllLimitLines;

/// Returns the LimitLines of this axis.
@property (nonatomic, readonly, copy) NSArray * __nonnull limitLines;
@end


SWIFT_CLASS("_TtC6Charts21ChartAxisRendererBase")
@interface ChartAxisRendererBase : ChartRendererBase
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Draws the axis labels on the specified context
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;

/// Draws the grid lines belonging to the axis.
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;

/// Draws the line that goes alongside the axis.
- (void)renderAxisLineWithContext:(CGContextRef __nonnull)context;

/// Draws the LimitLines associated with this axis to the screen.
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts19ChartColorTemplates")
@interface ChartColorTemplates : NSObject
+ (NSArray * __nonnull)liberty;
+ (NSArray * __nonnull)joyful;
+ (NSArray * __nonnull)pastel;
+ (NSArray * __nonnull)colorful;
+ (NSArray * __nonnull)vordiplom;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC6Charts19ChartDataBaseFilter")
@interface ChartDataBaseFilter : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray * __nonnull)filter:(NSArray * __nonnull)points;
@end

enum ApproximatorType : NSInteger;

SWIFT_CLASS("_TtC6Charts27ChartDataApproximatorFilter")
@interface ChartDataApproximatorFilter : ChartDataBaseFilter

/// the type of filtering algorithm to use
@property (nonatomic) enum ApproximatorType type;

/// the tolerance to be filtered with
/// When using the Douglas-Peucker-Algorithm, the tolerance is an angle in degrees, that will trigger the filtering
@property (nonatomic) double tolerance;
@property (nonatomic) float scaleRatio;
@property (nonatomic) float deltaRatio;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes the approximator with the given type and tolerance. 
/// If toleranec <= 0, no filtering will be done.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithType:(enum ApproximatorType)type tolerance:(double)tolerance OBJC_DESIGNATED_INITIALIZER;

/// Sets type and tolerance.
/// If tolerance <= 0, no filtering will be done.
- (void)setup:(enum ApproximatorType)type tolerance:(double)tolerance;

/// Sets the ratios for x- and y-axis, as well as the ratio of the scale levels
- (void)setRatios:(float)deltaRatio scaleRatio:(float)scaleRatio;

/// Filters according to type. Uses the pre set set tolerance
///
/// \param points the points to filter
- (NSArray * __nonnull)filter:(NSArray * __nonnull)points;

/// Filters according to type.
///
/// \param points the points to filter
///
/// \param tolerance the angle in degrees that will trigger the filtering
- (NSArray * __nonnull)filter:(NSArray * __nonnull)points tolerance:(double)tolerance;
@end

typedef SWIFT_ENUM(NSInteger, ApproximatorType) {
  ApproximatorTypeNone = 0,
  ApproximatorTypeRamerDouglasPeucker = 1,
};





typedef SWIFT_ENUM(NSInteger, ChartEasingOption) {
  ChartEasingOptionLinear = 0,
  ChartEasingOptionEaseInQuad = 1,
  ChartEasingOptionEaseOutQuad = 2,
  ChartEasingOptionEaseInOutQuad = 3,
  ChartEasingOptionEaseInCubic = 4,
  ChartEasingOptionEaseOutCubic = 5,
  ChartEasingOptionEaseInOutCubic = 6,
  ChartEasingOptionEaseInQuart = 7,
  ChartEasingOptionEaseOutQuart = 8,
  ChartEasingOptionEaseInOutQuart = 9,
  ChartEasingOptionEaseInQuint = 10,
  ChartEasingOptionEaseOutQuint = 11,
  ChartEasingOptionEaseInOutQuint = 12,
  ChartEasingOptionEaseInSine = 13,
  ChartEasingOptionEaseOutSine = 14,
  ChartEasingOptionEaseInOutSine = 15,
  ChartEasingOptionEaseInExpo = 16,
  ChartEasingOptionEaseOutExpo = 17,
  ChartEasingOptionEaseInOutExpo = 18,
  ChartEasingOptionEaseInCirc = 19,
  ChartEasingOptionEaseOutCirc = 20,
  ChartEasingOptionEaseInOutCirc = 21,
  ChartEasingOptionEaseInElastic = 22,
  ChartEasingOptionEaseOutElastic = 23,
  ChartEasingOptionEaseInOutElastic = 24,
  ChartEasingOptionEaseInBack = 25,
  ChartEasingOptionEaseOutBack = 26,
  ChartEasingOptionEaseInOutBack = 27,
  ChartEasingOptionEaseInBounce = 28,
  ChartEasingOptionEaseOutBounce = 29,
  ChartEasingOptionEaseInOutBounce = 30,
};

@class LineChartDataSet;
@class LineChartData;


/// Protocol for providing a custom logic to where the filling line of a DataSet should end. If setFillEnabled(...) is set to true.
SWIFT_PROTOCOL("_TtP6Charts18ChartFillFormatter_")
@protocol ChartFillFormatter

/// Returns the vertical (y-axis) position where the filled-line of the DataSet should end.
- (CGFloat)getFillLinePositionWithDataSet:(LineChartDataSet * __nonnull)dataSet data:(LineChartData * __nonnull)data chartMaxY:(float)chartMaxY chartMinY:(float)chartMinY;
@end


SWIFT_CLASS("_TtC6Charts14ChartHighlight")
@interface ChartHighlight : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)x dataSetIndex:(NSInteger)dataSetIndex OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXIndex:(NSInteger)x dataSetIndex:(NSInteger)dataSetIndex stackIndex:(NSInteger)stackIndex OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger dataSetIndex;
@property (nonatomic, readonly) NSInteger xIndex;
@property (nonatomic, readonly) NSInteger stackIndex;
@property (nonatomic, readonly, copy, getter=description) NSString * __nonnull description;
- (BOOL)isEqual:(id __nullable)object;
@end

enum ChartLegendPosition : NSInteger;
enum ChartLegendDirection : NSInteger;
enum ChartLegendForm : NSInteger;

SWIFT_CLASS("_TtC6Charts11ChartLegend")
@interface ChartLegend : ChartComponentBase
@property (nonatomic) enum ChartLegendPosition position;
@property (nonatomic) enum ChartLegendDirection direction;
@property (nonatomic) UIFont * __nonnull font;
@property (nonatomic) UIColor * __nonnull textColor;
@property (nonatomic) enum ChartLegendForm form;
@property (nonatomic) CGFloat formSize;
@property (nonatomic) CGFloat formLineWidth;
@property (nonatomic) CGFloat xEntrySpace;
@property (nonatomic) CGFloat yEntrySpace;
@property (nonatomic) CGFloat formToTextSpace;
@property (nonatomic) CGFloat stackSpace;
@property (nonatomic) CGFloat xOffset;
@property (nonatomic) CGFloat yOffset;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (CGSize)getMaximumEntrySize:(UIFont * __nonnull)font;
- (NSString * __nullable)getLabel:(NSInteger)index;
- (CGSize)getFullSize:(UIFont * __nonnull)labelFont;
@property (nonatomic) CGFloat neededWidth;
@property (nonatomic) CGFloat neededHeight;
@property (nonatomic) CGFloat textWidthMax;
@property (nonatomic) CGFloat textHeightMax;
- (void)calculateDimensions:(UIFont * __nonnull)labelFont;
@end

typedef SWIFT_ENUM(NSInteger, ChartLegendPosition) {
  ChartLegendPositionRightOfChart = 0,
  ChartLegendPositionRightOfChartCenter = 1,
  ChartLegendPositionRightOfChartInside = 2,
  ChartLegendPositionLeftOfChart = 3,
  ChartLegendPositionLeftOfChartCenter = 4,
  ChartLegendPositionLeftOfChartInside = 5,
  ChartLegendPositionBelowChartLeft = 6,
  ChartLegendPositionBelowChartRight = 7,
  ChartLegendPositionBelowChartCenter = 8,
  ChartLegendPositionPiechartCenter = 9,
};

typedef SWIFT_ENUM(NSInteger, ChartLegendForm) {
  ChartLegendFormSquare = 0,
  ChartLegendFormCircle = 1,
  ChartLegendFormLine = 2,
};

typedef SWIFT_ENUM(NSInteger, ChartLegendDirection) {
  ChartLegendDirectionLeftToRight = 0,
  ChartLegendDirectionRightToLeft = 1,
};


SWIFT_CLASS("_TtC6Charts19ChartLegendRenderer")
@interface ChartLegendRenderer : ChartRendererBase

/// Prepares the legend and calculates all needed forms, labels and colors.
- (void)computeLegend:(ChartData * __nonnull)data;
- (void)renderLegendWithContext:(CGContextRef __nonnull)context;
@end

enum ChartLimitLabelPosition : NSInteger;


/// The limit line is an additional feature for all Line, Bar and ScatterCharts.
/// It allows the displaying of an additional line in the chart that marks a certain maximum / limit on the specified axis (x- or y-axis).
SWIFT_CLASS("_TtC6Charts14ChartLimitLine")
@interface ChartLimitLine : ChartComponentBase

/// limit / maximum (the y-value or xIndex)
@property (nonatomic) float limit;
@property (nonatomic) UIColor * __nonnull lineColor;
@property (nonatomic) CGFloat lineDashPhase;
@property (nonatomic, copy) NSArray * __nullable lineDashLengths;
@property (nonatomic) UIColor * __nonnull valueTextColor;
@property (nonatomic) UIFont * __nonnull valueFont;
@property (nonatomic, copy) NSString * __nonnull label;
@property (nonatomic) enum ChartLimitLabelPosition labelPosition;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithLimit:(float)limit OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithLimit:(float)limit label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// set the line width of the chart (min = 0.2f, max = 12f); default 2f
@property (nonatomic) CGFloat lineWidth;
@end

typedef SWIFT_ENUM(NSInteger, ChartLimitLabelPosition) {
  ChartLimitLabelPositionLeft = 0,
  ChartLimitLabelPositionRight = 1,
};


SWIFT_CLASS("_TtC6Charts11ChartMarker")
@interface ChartMarker : ChartComponentBase

/// The marker image to render
@property (nonatomic) UIImage * __nullable image;

/// Use this to return the desired offset you wish the MarkerView to have on the x-axis.
@property (nonatomic) CGPoint offset;

/// The marker's size
@property (nonatomic, readonly) CGSize size;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Draws the ChartMarker on the given position on the given context
- (void)drawWithContext:(CGContextRef __nonnull)context point:(CGPoint)point;

/// This method enables a custom ChartMarker to update it's content everytime the MarkerView is redrawn according to the data entry it points to.
- (void)refreshContentWithEntry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;
@end



SWIFT_CLASS("_TtC6Charts12ChartSelInfo")
@interface ChartSelInfo : NSObject
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithValue:(float)value dataSetIndex:(NSInteger)dataSetIndex dataSet:(ChartDataSet * __nonnull)dataSet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) float value;
@property (nonatomic, readonly) NSInteger dataSetIndex;
@property (nonatomic, readonly) ChartDataSet * __nullable dataSet;
- (BOOL)isEqual:(id __nullable)object;
@end



/// Transformer class that contains all matrices and is responsible for transforming values into pixels on the screen and backwards.
SWIFT_CLASS("_TtC6Charts16ChartTransformer")
@interface ChartTransformer : NSObject

/// Prepares the matrix that transforms values to pixels. Calculates the scale factors from the charts size and offsets.
- (void)prepareMatrixValuePxWithChartXMin:(float)chartXMin deltaX:(CGFloat)deltaX deltaY:(CGFloat)deltaY chartYMin:(float)chartYMin;

/// Prepares the matrix that contains all offsets.
- (void)prepareMatrixOffset:(BOOL)inverted;

/// Returns the x and y values in the chart at the given touch point
/// (encapsulated in a PointD). This method transforms pixel coordinates to
/// coordinates / values in the chart.
- (CGPoint)getValueByTouchPoint:(CGPoint)point;
@property (nonatomic, readonly) CGAffineTransform valueToPixelMatrix;
@property (nonatomic, readonly) CGAffineTransform pixelToValueMatrix;
@end


SWIFT_CLASS("_TtC6Charts34ChartTransformerHorizontalBarChart")
@interface ChartTransformerHorizontalBarChart : ChartTransformer

/// Prepares the matrix that contains all offsets.
- (void)prepareMatrixOffset:(BOOL)inverted;
@end



SWIFT_PROTOCOL("_TtP6Charts17ChartViewDelegate_")
@protocol ChartViewDelegate
@optional

/// Called when a value has been selected inside the chart.
/// :entry: The selected Entry.
/// :dataSetIndex: The index in the datasets array of the data object the Entrys DataSet is in.
- (void)chartValueSelected:(ChartViewBase * __nonnull)chartView entry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex highlight:(ChartHighlight * __nonnull)highlight;
- (void)chartValueNothingSelected:(ChartViewBase * __nonnull)chartView;
@end

enum XAxisLabelPosition : NSInteger;

SWIFT_CLASS("_TtC6Charts10ChartXAxis")
@interface ChartXAxis : ChartAxisBase
@property (nonatomic, copy) NSArray * __nonnull values;
@property (nonatomic) CGFloat labelWidth;
@property (nonatomic) CGFloat labelHeight;

/// the space that should be left out (in characters) between the x-axis labels
/// This only applies if the number of labels that will be skipped in between drawn axis labels is not custom set.
/// :default: 4
@property (nonatomic) NSInteger spaceBetweenLabels;

/// the modulus that indicates if a value at a specified index in an array(list) for the x-axis-labels is drawn or not. Draw when (index % modulus) == 0.
@property (nonatomic) NSInteger axisLabelModulus;

/// the modulus that indicates if a value at a specified index in an array(list) for the y-axis-labels is drawn or not. Draw when (index % modulus) == 0.
/// Used only for Horizontal BarChart
@property (nonatomic) NSInteger yAxisLabelModulus;

/// if set to true, the chart will avoid that the first and last label entry in the chart "clip" off the edge of the chart
@property (nonatomic) BOOL avoidFirstLastClippingEnabled;

/// the position of the x-labels relative to the chart
@property (nonatomic) enum XAxisLabelPosition labelPosition;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * __nonnull)getLongestLabel;
@property (nonatomic, readonly) BOOL isAvoidFirstLastClippingEnabled;

/// Calling this will disable a custom number of labels to be skipped (set by setLabelsToSkip(...)) while drawing the x-axis. Instead, the number of values to skip will again be calculated automatically.
- (void)resetLabelsToSkip;

/// Returns true if a custom axis-modulus has been set that determines the number of labels to skip when drawing.
@property (nonatomic, readonly) BOOL isAxisModulusCustom;
@end

typedef SWIFT_ENUM(NSInteger, XAxisLabelPosition) {
  XAxisLabelPositionTop = 0,
  XAxisLabelPositionBottom = 1,
  XAxisLabelPositionBothSided = 2,
  XAxisLabelPositionTopInside = 3,
  XAxisLabelPositionBottomInside = 4,
};


SWIFT_CLASS("_TtC6Charts18ChartXAxisRenderer")
@interface ChartXAxisRenderer : ChartAxisRendererBase
- (void)computeAxisWithXValAverageLength:(float)xValAverageLength xValues:(NSArray * __nonnull)xValues;
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef __nonnull)context;
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts26ChartXAxisRendererBarChart")
@interface ChartXAxisRendererBarChart : ChartXAxisRenderer
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts36ChartXAxisRendererHorizontalBarChart")
@interface ChartXAxisRendererHorizontalBarChart : ChartXAxisRendererBarChart
- (void)computeAxisWithXValAverageLength:(float)xValAverageLength xValues:(NSArray * __nonnull)xValues;
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts28ChartXAxisRendererRadarChart")
@interface ChartXAxisRendererRadarChart : ChartXAxisRenderer
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end

enum YAxisLabelPosition : NSInteger;


/// Class representing the y-axis labels settings and its entries.
/// Be aware that not all features the YLabels class provides are suitable for the RadarChart.
/// Customizations that affect the value range of the axis need to be applied before setting data for the chart.
SWIFT_CLASS("_TtC6Charts10ChartYAxis")
@interface ChartYAxis : ChartAxisBase
@property (nonatomic, copy) NSArray * __nonnull entries;
@property (nonatomic, readonly) NSInteger entryCount;

/// indicates if the top y-label entry is drawn or not
@property (nonatomic) BOOL drawTopYLabelEntryEnabled;

/// if true, the y-labels show only the minimum and maximum value
@property (nonatomic) BOOL showOnlyMinMaxEnabled;

/// flag that indicates if the axis is inverted or not
@property (nonatomic) BOOL inverted;

/// if true, the y-label entries will always start at zero
@property (nonatomic) BOOL startAtZeroEnabled;

/// the formatter used to customly format the y-labels
@property (nonatomic) NSNumberFormatter * __nullable valueFormatter;

/// A custom minimum value for this axis. 
/// If set, this value will not be calculated automatically depending on the provided data. 
/// Use resetcustomAxisMin() to undo this. 
/// Do not forget to set startAtZeroEnabled = false if you use this method.
/// Otherwise, the axis-minimum value will still be forced to 0.
@property (nonatomic) float customAxisMin;

/// Set a custom maximum value for this axis. 
/// If set, this value will not be calculated automatically depending on the provided data. 
/// Use resetcustomAxisMax() to undo this.
@property (nonatomic) float customAxisMax;

/// axis space from the largest value to the top in percent of the total axis range
@property (nonatomic) CGFloat spaceTop;

/// axis space from the smallest value to the bottom in percent of the total axis range
@property (nonatomic) CGFloat spaceBottom;
@property (nonatomic) float axisMaximum;
@property (nonatomic) float axisMinimum;

/// the total range of values this axis covers
@property (nonatomic) float axisRange;

/// the position of the y-labels relative to the chart
@property (nonatomic) enum YAxisLabelPosition labelPosition;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithPosition:(enum AxisDependency)position OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) enum AxisDependency axisDependency;

/// the number of label entries the y-axis should have
/// max = 25,
/// min = 2,
/// default = 6,
/// be aware that this number is not fixed and can only be approximated
@property (nonatomic) NSInteger labelCount;

/// By calling this method, any custom minimum value that has been previously set is reseted, and the calculation is done automatically.
- (void)resetcustomAxisMin;

/// By calling this method, any custom maximum value that has been previously set is reseted, and the calculation is done automatically.
- (void)resetcustomAxisMax;
- (CGSize)requiredSize;
- (NSString * __nonnull)getLongestLabel;

/// Returns the formatted y-label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).
- (NSString * __nonnull)getFormattedLabel:(NSInteger)index;

/// Returns true if this axis needs horizontal offset, false if no offset is needed.
@property (nonatomic, readonly) BOOL needsOffset;
@property (nonatomic, readonly) BOOL isInverted;
@property (nonatomic, readonly) BOOL isStartAtZeroEnabled;
@property (nonatomic, readonly) BOOL isShowOnlyMinMaxEnabled;
@property (nonatomic, readonly) BOOL isDrawTopYLabelEntryEnabled;
@end

typedef SWIFT_ENUM(NSInteger, YAxisLabelPosition) {
  YAxisLabelPositionOutsideChart = 0,
  YAxisLabelPositionInsideChart = 1,
};


/// Enum that specifies the axis a DataSet should be plotted against, either Left or Right.
typedef SWIFT_ENUM(NSInteger, AxisDependency) {
  AxisDependencyLeft = 0,
  AxisDependencyRight = 1,
};


SWIFT_CLASS("_TtC6Charts18ChartYAxisRenderer")
@interface ChartYAxisRenderer : ChartAxisRendererBase

/// draws the y-axis labels to the screen
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef __nonnull)context;
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts36ChartYAxisRendererHorizontalBarChart")
@interface ChartYAxisRendererHorizontalBarChart : ChartYAxisRenderer

/// draws the y-axis labels to the screen
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderAxisLineWithContext:(CGContextRef __nonnull)context;
- (void)renderGridLinesWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end


SWIFT_CLASS("_TtC6Charts28ChartYAxisRendererRadarChart")
@interface ChartYAxisRendererRadarChart : ChartYAxisRenderer
- (void)computeAxisWithYMin:(float)yMin yMax:(float)yMax;
- (void)renderAxisLabelsWithContext:(CGContextRef __nonnull)context;
- (void)renderLimitLinesWithContext:(CGContextRef __nonnull)context;
@end

@class ScatterChartData;

SWIFT_CLASS("_TtC6Charts17CombinedChartData")
@interface CombinedChartData : BarLineScatterCandleChartData
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) LineChartData * __null_unspecified lineData;
@property (nonatomic) BarChartData * __null_unspecified barData;
@property (nonatomic) ScatterChartData * __null_unspecified scatterData;
@property (nonatomic) CandleChartData * __null_unspecified candleData;
@property (nonatomic) BubbleChartData * __null_unspecified bubbleData;
- (void)notifyDataChanged;
@end

@class ScatterChartRenderer;

SWIFT_PROTOCOL("_TtP6Charts28ScatterChartRendererDelegate_")
@protocol ScatterChartRendererDelegate
- (ScatterChartData * __null_unspecified)scatterChartRendererData:(ScatterChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)scatterChartRenderer:(ScatterChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)scatterChartDefaultRendererValueFormatter:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMin:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMin:(ScatterChartRenderer * __nonnull)renderer;
- (NSInteger)scatterChartRendererMaxVisibleValueCount:(ScatterChartRenderer * __nonnull)renderer;
@end

@class LineChartRenderer;

SWIFT_PROTOCOL("_TtP6Charts25LineChartRendererDelegate_")
@protocol LineChartRendererDelegate
- (LineChartData * __null_unspecified)lineChartRendererData:(LineChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)lineChartRenderer:(LineChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (id <ChartFillFormatter> __nonnull)lineChartRendererFillFormatter:(LineChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)lineChartDefaultRendererValueFormatter:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMin:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMin:(LineChartRenderer * __nonnull)renderer;
- (NSInteger)lineChartRendererMaxVisibleValueCount:(LineChartRenderer * __nonnull)renderer;
@end


SWIFT_CLASS("_TtC6Charts21CombinedChartRenderer")
@interface CombinedChartRenderer : ChartDataRendererBase <LineChartRendererDelegate, BarChartRendererDelegate, ScatterChartRendererDelegate, CandleStickChartRendererDelegate, BubbleChartRendererDelegate>

/// flag that enables or disables the highlighting arrow
@property (nonatomic) BOOL drawHighlightArrowEnabled;

/// if set to true, all values are drawn above their bars, instead of below their top
@property (nonatomic) BOOL drawValueAboveBarEnabled;

/// if set to true, all values of a stack are drawn individually, and not just their sum
@property (nonatomic) BOOL drawValuesForWholeStackEnabled;

/// if set to true, a grey area is darawn behind each bar that indicates the maximum value
@property (nonatomic) BOOL drawBarShadowEnabled;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
- (void)calcXBoundsWithChart:(BarLineChartViewBase * __nonnull)chart xAxisModulus:(NSInteger)xAxisModulus;

/// Returns the sub-renderer object at the specified index.
- (ChartDataRendererBase * __null_unspecified)getSubRendererWithIndex:(NSInteger)index;
- (LineChartData * __null_unspecified)lineChartRendererData:(LineChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)lineChartRenderer:(LineChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (id <ChartFillFormatter> __nonnull)lineChartRendererFillFormatter:(LineChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)lineChartDefaultRendererValueFormatter:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMin:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMin:(LineChartRenderer * __nonnull)renderer;
- (NSInteger)lineChartRendererMaxVisibleValueCount:(LineChartRenderer * __nonnull)renderer;
- (BarChartData * __null_unspecified)barChartRendererData:(BarChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)barChartRenderer:(BarChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSInteger)barChartRendererMaxVisibleValueCount:(BarChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)barChartDefaultRendererValueFormatter:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartYMin:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMax:(BarChartRenderer * __nonnull)renderer;
- (float)barChartRendererChartXMin:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawHighlightArrowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValueAboveBarEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawValuesForWholeStackEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsDrawBarShadowEnabled:(BarChartRenderer * __nonnull)renderer;
- (BOOL)barChartIsInverted:(BarChartRenderer * __nonnull)renderer axis:(enum AxisDependency)axis;
- (ScatterChartData * __null_unspecified)scatterChartRendererData:(ScatterChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)scatterChartRenderer:(ScatterChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)scatterChartDefaultRendererValueFormatter:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMin:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMin:(ScatterChartRenderer * __nonnull)renderer;
- (NSInteger)scatterChartRendererMaxVisibleValueCount:(ScatterChartRenderer * __nonnull)renderer;
- (CandleChartData * __null_unspecified)candleStickChartRendererCandleData:(CandleStickChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)candleStickChartRenderer:(CandleStickChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)candleStickChartDefaultRendererValueFormatter:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartYMin:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMax:(CandleStickChartRenderer * __nonnull)renderer;
- (float)candleStickChartRendererChartXMin:(CandleStickChartRenderer * __nonnull)renderer;
- (NSInteger)candleStickChartRendererMaxVisibleValueCount:(CandleStickChartRenderer * __nonnull)renderer;
- (BubbleChartData * __null_unspecified)bubbleChartRendererData:(BubbleChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)bubbleChartRenderer:(BubbleChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)bubbleChartDefaultRendererValueFormatter:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartYMin:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMax:(BubbleChartRenderer * __nonnull)renderer;
- (float)bubbleChartRendererChartXMin:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererMaxVisibleValueCount:(BubbleChartRenderer * __nonnull)renderer;
- (NSInteger)bubbleChartRendererXValCount:(BubbleChartRenderer * __nonnull)renderer;

/// returns true if drawing the highlighting arrow is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawHighlightArrowEnabled;

/// returns true if drawing values above bars is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawValueAboveBarEnabled;

/// returns true if all values of a stack are drawn, and not just their sum
@property (nonatomic, readonly) BOOL isDrawValuesForWholeStackEnabled;

/// returns true if drawing shadows (maxvalue) for each bar is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawBarShadowEnabled;
@end



/// This chart class allows the combination of lines, bars, scatter and candle data all displayed in one chart area.
SWIFT_CLASS("_TtC6Charts17CombinedChartView")
@interface CombinedChartView : BarLineChartViewBase
- (void)initialize;
@property (nonatomic) ChartData * __nullable data;
@property (nonatomic) id <ChartFillFormatter> __nonnull fillFormatter;
@property (nonatomic, readonly) LineChartData * __null_unspecified lineData;
@property (nonatomic, readonly) BarChartData * __null_unspecified barData;
@property (nonatomic, readonly) ScatterChartData * __null_unspecified scatterData;
@property (nonatomic, readonly) CandleChartData * __null_unspecified candleData;
@property (nonatomic, readonly) BubbleChartData * __null_unspecified bubbleData;

/// flag that enables or disables the highlighting arrow
@property (nonatomic) BOOL drawHighlightArrowEnabled;

/// if set to true, all values are drawn above their bars, instead of below their top
@property (nonatomic) BOOL drawValueAboveBarEnabled;

/// if set to true, all values of a stack are drawn individually, and not just their sum
@property (nonatomic) BOOL drawValuesForWholeStackEnabled;

/// if set to true, a grey area is darawn behind each bar that indicates the maximum value
@property (nonatomic) BOOL drawBarShadowEnabled;

/// returns true if drawing the highlighting arrow is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawHighlightArrowEnabled;

/// returns true if drawing values above bars is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawValueAboveBarEnabled;

/// returns true if all values of a stack are drawn, and not just their sum
@property (nonatomic, readonly) BOOL isDrawValuesForWholeStackEnabled;

/// returns true if drawing shadows (maxvalue) for each bar is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawBarShadowEnabled;

/// the order in which the provided data objects should be drawn.
/// The earlier you place them in the provided array, the further they will be in the background. 
/// e.g. if you provide [DrawOrder.Bar, DrawOrder.Line], the bars will be drawn behind the lines.
@property (nonatomic, copy) NSArray * __nonnull drawOrder;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// enum that allows to specify the order in which the different data objects for the combined-chart are drawn
typedef SWIFT_ENUM(NSInteger, CombinedChartDrawOrder) {
  CombinedChartDrawOrderBar = 0,
  CombinedChartDrawOrderBubble = 1,
  CombinedChartDrawOrderLine = 2,
  CombinedChartDrawOrderCandle = 3,
  CombinedChartDrawOrderScatter = 4,
};


SWIFT_CLASS("_TtC6Charts26HorizontalBarChartRenderer")
@interface HorizontalBarChartRenderer : BarChartRenderer
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
@end



/// BarChart with horizontal bar orientation. In this implementation, x- and y-axis are switched.
SWIFT_CLASS("_TtC6Charts22HorizontalBarChartView")
@interface HorizontalBarChartView : BarChartView
- (CGPoint)getPosition:(ChartDataEntry * __nonnull)e axis:(enum AxisDependency)axis;
@property (nonatomic, readonly) NSInteger lowestVisibleXIndex;
@property (nonatomic, readonly) NSInteger highestVisibleXIndex;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// Data object that encapsulates all data associated with a LineChart.
SWIFT_CLASS("_TtC6Charts13LineChartData")
@interface LineChartData : ChartData
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts21LineRadarChartDataSet")
@interface LineRadarChartDataSet : BarLineScatterCandleChartDataSet
@property (nonatomic) UIColor * __nonnull fillColor;
@property (nonatomic) CGFloat fillAlpha;
@property (nonatomic) BOOL drawFilledEnabled;

/// line width of the chart (min = 0.2f, max = 10f)
/// :default: 1
@property (nonatomic) CGFloat lineWidth;
@property (nonatomic, readonly) BOOL isDrawFilledEnabled;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts16LineChartDataSet")
@interface LineChartDataSet : LineRadarChartDataSet
@property (nonatomic, copy) NSArray * __nonnull circleColors;
@property (nonatomic) UIColor * __nonnull circleHoleColor;
@property (nonatomic) CGFloat circleRadius;
@property (nonatomic) CGFloat lineDashPhase;
@property (nonatomic, copy) NSArray * __null_unspecified lineDashLengths;

/// if true, drawing circles is enabled
@property (nonatomic) BOOL drawCirclesEnabled;

/// if true, cubic lines are drawn instead of linear
@property (nonatomic) BOOL drawCubicEnabled;
@property (nonatomic) BOOL drawCircleHoleEnabled;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// intensity for cubic lines (min = 0.05f, max = 1f)
/// :default: 0.2
@property (nonatomic) CGFloat cubicIntensity;

/// Sets the one and ONLY color that should be used for this DataSet.
/// Internally, this recreates the colors array and adds the specified color.
- (void)setCircleColor:(UIColor * __nonnull)color;
@property (nonatomic, readonly) BOOL isDrawCirclesEnabled;
@property (nonatomic, readonly) BOOL isDrawCubicEnabled;
@property (nonatomic, readonly) BOOL isDrawCircleHoleEnabled;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts17LineChartRenderer")
@interface LineChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) id <LineChartRendererDelegate> __nullable delegate;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end




/// Chart that draws lines, surfaces, circles, ...
SWIFT_CLASS("_TtC6Charts13LineChartView")
@interface LineChartView : BarLineChartViewBase <LineChartRendererDelegate>
@property (nonatomic) id <ChartFillFormatter> __null_unspecified fillFormatter;
- (LineChartData * __null_unspecified)lineChartRendererData:(LineChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)lineChartRenderer:(LineChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (id <ChartFillFormatter> __nonnull)lineChartRendererFillFormatter:(LineChartRenderer * __nonnull)renderer;
- (NSNumberFormatter * __null_unspecified)lineChartDefaultRendererValueFormatter:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartYMin:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMax:(LineChartRenderer * __nonnull)renderer;
- (float)lineChartRendererChartXMin:(LineChartRenderer * __nonnull)renderer;
- (NSInteger)lineChartRendererMaxVisibleValueCount:(LineChartRenderer * __nonnull)renderer;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Charts12PieChartData")
@interface PieChartData : ChartData
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSet:(ChartDataSet * __nullable)dataSet;
- (ChartDataSet * __nullable)getDataSetByIndex:(NSInteger)index;
- (ChartDataSet * __nullable)getDataSetByLabel:(NSString * __nonnull)label ignorecase:(BOOL)ignorecase;
@end


SWIFT_CLASS("_TtC6Charts15PieChartDataSet")
@interface PieChartDataSet : ChartDataSet

/// indicates the selection distance of a pie slice
@property (nonatomic) CGFloat selectionShift;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;

/// the space that is left out between the piechart-slices, default: 0°
/// --> no space, maximum 45, minimum 0 (no space)
@property (nonatomic) CGFloat sliceSpace;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
@end


SWIFT_CLASS("_TtC6Charts16PieChartRenderer")
@interface PieChartRenderer : ChartDataRendererBase
@property (nonatomic) BOOL drawHoleEnabled;
@property (nonatomic) BOOL holeTransparent;
@property (nonatomic) UIColor * __nullable holeColor;
@property (nonatomic) CGFloat holeRadiusPercent;
@property (nonatomic) CGFloat transparentCircleRadiusPercent;
@property (nonatomic) UIColor * __nonnull centerTextColor;
@property (nonatomic) UIFont * __nonnull centerTextFont;
@property (nonatomic) BOOL drawXLabelsEnabled;
@property (nonatomic) BOOL usePercentValuesEnabled;
@property (nonatomic, copy) NSString * __null_unspecified centerText;
@property (nonatomic) BOOL drawCenterTextEnabled;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end



/// Base class of PieChartView and RadarChartView.
SWIFT_CLASS("_TtC6Charts21PieRadarChartViewBase")
@interface PieRadarChartViewBase : ChartViewBase

/// flag that indicates if rotation is enabled or not
@property (nonatomic) BOOL rotationEnabled;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)notifyDataSetChanged;

/// returns the angle relative to the chart center for the given point on the chart in degrees.
/// The angle is always between 0 and 360°, 0° is NORTH, 90° is EAST, ...
- (CGFloat)angleForPointWithX:(CGFloat)x y:(CGFloat)y;

/// Returns the distance of a certain point on the chart to the center of the chart.
- (CGFloat)distanceToCenterWithX:(CGFloat)x y:(CGFloat)y;

/// Returns the xIndex for the given angle around the center of the chart.
/// Returns -1 if not found / outofbounds.
- (NSInteger)indexForAngle:(CGFloat)angle;

/// current rotation angle of the pie chart
/// :returns will always return a normalized value, which will be between 0.0 < 360.0
/// :default: 270f --> top (NORTH)
@property (nonatomic) CGFloat rotationAngle;

/// gets the raw version of the current rotation angle of the pie chart the returned value could be any value, negative or positive, outside of the 360 degrees. 
/// this is used when working with rotation direction, mainly by gestures and animations.
@property (nonatomic, readonly) CGFloat rawRotationAngle;

/// returns the diameter of the pie- or radar-chart
@property (nonatomic, readonly) CGFloat diameter;

/// Returns the radius of the chart in pixels.
@property (nonatomic, readonly) CGFloat radius;
@property (nonatomic, readonly) float chartXMax;
@property (nonatomic, readonly) float chartXMin;

/// Returns an array of SelInfo objects for the given x-index.
/// The SelInfo objects give information about the value at the selected index and the DataSet it belongs to.
- (NSArray * __nonnull)getYValsAtIndex:(NSInteger)xIndex;
@property (nonatomic, readonly) BOOL isRotationEnabled;

/// flag that indicates if rotation is done with two fingers or one.
/// when the chart is inside a scrollview, you need a two-finger rotation because a one-finger rotation eats up all touch events.
/// :default: false
@property (nonatomic) BOOL rotationWithTwoFingers;

/// flag that indicates if rotation is done with two fingers or one.
/// when the chart is inside a scrollview, you need a two-finger rotation because a one-finger rotation eats up all touch events.
/// :default: false
@property (nonatomic, readonly) BOOL isRotationWithTwoFingers;

/// Applys a spin animation to the Chart.
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle easing:(CGFloat (^ __nullable)(NSTimeInterval, NSTimeInterval))easing;
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle easingOption:(enum ChartEasingOption)easingOption;
- (void)spinWithDuration:(NSTimeInterval)duration fromAngle:(CGFloat)fromAngle toAngle:(CGFloat)toAngle;
- (void)stopSpinAnimation;
- (void)touchesBegan:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesMoved:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesEnded:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)touchesCancelled:(NSSet * __nonnull)touches withEvent:(UIEvent * __nonnull)event;
- (void)stopDeceleration;
@end



/// View that represents a pie chart. Draws cake like slices.
SWIFT_CLASS("_TtC6Charts12PieChartView")
@interface PieChartView : PieRadarChartViewBase
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (CGPoint)getMarkerPositionWithEntry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;

/// checks if the given index in the given DataSet is set for highlighting or not
- (BOOL)needsHighlightWithXIndex:(NSInteger)xIndex dataSetIndex:(NSInteger)dataSetIndex;
- (NSInteger)indexForAngle:(CGFloat)angle;

/// Returns the index of the DataSet this x-index belongs to.
- (NSInteger)dataSetIndexForIndex:(NSInteger)xIndex;

/// returns an integer array of all the different angles the chart slices
/// have the angles in the returned array determine how much space (of 360°)
/// each slice takes
@property (nonatomic, readonly, copy) NSArray * __nonnull drawAngles;

/// returns the absolute angles of the different chart slices (where the
/// slices end)
@property (nonatomic, readonly, copy) NSArray * __nonnull absoluteAngles;

/// Sets the color for the hole that is drawn in the center of the PieChart (if enabled).
/// NOTE: Use holeTransparent with holeColor = nil to make the hole transparent.
@property (nonatomic) UIColor * __nullable holeColor;

/// Set the hole in the center of the PieChart transparent
@property (nonatomic) BOOL holeTransparent;

/// Returns true if the hole in the center of the PieChart is transparent, false if not.
@property (nonatomic, readonly) BOOL isHoleTransparent;

/// true if the hole in the center of the pie-chart is set to be visible, false if not
@property (nonatomic) BOOL drawHoleEnabled;

/// \returns true if the hole in the center of the pie-chart is set to be visible, false if not
@property (nonatomic, readonly) BOOL isDrawHoleEnabled;

/// the text that is displayed in the center of the pie-chart. By default, the text is "Total value + sum of all values"
@property (nonatomic, copy) NSString * __null_unspecified centerText;

/// true if drawing the center text is enabled
@property (nonatomic) BOOL drawCenterTextEnabled;

/// \returns true if drawing the center text is enabled
@property (nonatomic, readonly) BOOL isDrawCenterTextEnabled;
@property (nonatomic, readonly) CGFloat radius;

/// returns the circlebox, the boundingbox of the pie-chart slices
@property (nonatomic, readonly) CGRect circleBox;

/// returns the center of the circlebox
@property (nonatomic, readonly) CGPoint centerCircleBox;

/// Sets the font of the center text of the piechart.
@property (nonatomic) UIFont * __nonnull centerTextFont;

/// Sets the color of the center text of the piechart.
@property (nonatomic) UIColor * __nonnull centerTextColor;

/// the radius of the hole in the center of the piechart in percent of the maximum radius (max = the radius of the whole chart)
/// :default: 0.5 (50%) (half the pie)
@property (nonatomic) CGFloat holeRadiusPercent;

/// the radius of the transparent circle that is drawn next to the hole in the piechart in percent of the maximum radius (max = the radius of the whole chart)
/// :default: 0.55 (55%) -> means 5% larger than the center-hole by default
@property (nonatomic) CGFloat transparentCircleRadiusPercent;

/// set this to true to draw the x-value text into the pie slices
@property (nonatomic) BOOL drawSliceTextEnabled;

/// \returns true if drawing x-values is enabled, false if not
@property (nonatomic, readonly) BOOL isDrawSliceTextEnabled;

/// If this is enabled, values inside the PieChart are drawn in percent and not with their original value. Values provided for the ValueFormatter to format are then provided in percent.
@property (nonatomic) BOOL usePercentValuesEnabled;

/// \returns true if drawing x-values is enabled, false if not
@property (nonatomic, readonly) BOOL isUsePercentValuesEnabled;
@end



SWIFT_CLASS("_TtC6Charts14RadarChartData")
@interface RadarChartData : ChartData
@property (nonatomic) UIColor * __nonnull highlightColor;
@property (nonatomic) CGFloat highlightLineWidth;
@property (nonatomic) CGFloat highlightLineDashPhase;
@property (nonatomic, copy) NSArray * __nullable highlightLineDashLengths;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts17RadarChartDataSet")
@interface RadarChartDataSet : LineRadarChartDataSet
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Charts18RadarChartRenderer")
@interface RadarChartRenderer : ChartDataRendererBase
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end



/// Implementation of the RadarChart, a "spidernet"-like chart. It works best
/// when displaying 5-10 entries per DataSet.
SWIFT_CLASS("_TtC6Charts14RadarChartView")
@interface RadarChartView : PieRadarChartViewBase

/// width of the web lines that come from the center.
@property (nonatomic) CGFloat webLineWidth;

/// width of the web lines that are in between the lines coming from the center
@property (nonatomic) CGFloat innerWebLineWidth;

/// color for the web lines that come from the center
@property (nonatomic) UIColor * __nonnull webColor;

/// color for the web lines in between the lines that come from the center.
@property (nonatomic) UIColor * __nonnull innerWebColor;

/// transparency the grid is drawn with (0.0 - 1.0)
@property (nonatomic) CGFloat webAlpha;

/// flag indicating if the web lines should be drawn or not
@property (nonatomic) BOOL drawWeb;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGPoint)getMarkerPositionWithEntry:(ChartDataEntry * __nonnull)entry dataSetIndex:(NSInteger)dataSetIndex;
- (void)notifyDataSetChanged;
- (void)drawRect:(CGRect)rect;

/// Returns the factor that is needed to transform values into pixels.
@property (nonatomic, readonly) CGFloat factor;

/// Returns the angle that each slice in the radar chart occupies.
@property (nonatomic, readonly) CGFloat sliceAngle;
- (NSInteger)indexForAngle:(CGFloat)angle;

/// Returns the object that represents all y-labels of the RadarChart.
@property (nonatomic, readonly) ChartYAxis * __nonnull yAxis;

/// Returns the object that represents all x-labels that are placed around the RadarChart.
@property (nonatomic, readonly) ChartXAxis * __nonnull xAxis;
@property (nonatomic, readonly) CGFloat radius;

/// Returns the maximum value this chart can display on it's y-axis.
@property (nonatomic, readonly) float chartYMax;

/// Returns the minimum value this chart can display on it's y-axis.
@property (nonatomic, readonly) float chartYMin;

/// Returns the range of y-values this chart can display.
@property (nonatomic, readonly) float yRange;
@end


SWIFT_CLASS("_TtC6Charts16ScatterChartData")
@interface ScatterChartData : BarLineScatterCandleChartData

/// Returns the maximum shape-size across all DataSets.
- (CGFloat)getGreatestShapeSize;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithXVals:(NSArray * __nullable)xVals dataSets:(NSArray * __nullable)dataSets OBJC_DESIGNATED_INITIALIZER;
@end

enum ScatterShape : NSInteger;

SWIFT_CLASS("_TtC6Charts19ScatterChartDataSet")
@interface ScatterChartDataSet : BarLineScatterCandleChartDataSet
@property (nonatomic) CGFloat scatterShapeSize;
@property (nonatomic) enum ScatterShape scatterShape;
@property (nonatomic) CGPathRef __nullable customScatterShape;
- (id __nonnull)copyWithZone:(NSZone * __null_unspecified)zone;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithYVals:(NSArray * __nullable)yVals label:(NSString * __nonnull)label OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScatterShape) {
  ScatterShapeCross = 0,
  ScatterShapeTriangle = 1,
  ScatterShapeCircle = 2,
  ScatterShapeSquare = 3,
  ScatterShapeCustom = 4,
};


SWIFT_CLASS("_TtC6Charts20ScatterChartRenderer")
@interface ScatterChartRenderer : ChartDataRendererBase
@property (nonatomic, weak) id <ScatterChartRendererDelegate> __nullable delegate;
- (void)drawDataWithContext:(CGContextRef __nonnull)context;
- (void)drawValuesWithContext:(CGContextRef __nonnull)context;
- (void)drawExtrasWithContext:(CGContextRef __nonnull)context;
- (void)drawHighlightedWithContext:(CGContextRef __nonnull)context indices:(NSArray * __nonnull)indices;
@end




/// The ScatterChart. Draws dots, triangles, squares and custom shapes into the chartview.
SWIFT_CLASS("_TtC6Charts16ScatterChartView")
@interface ScatterChartView : BarLineChartViewBase <ScatterChartRendererDelegate>
- (void)initialize;
- (void)calcMinMax;
- (ScatterChartData * __null_unspecified)scatterChartRendererData:(ScatterChartRenderer * __nonnull)renderer;
- (ChartTransformer * __null_unspecified)scatterChartRenderer:(ScatterChartRenderer * __nonnull)renderer transformerForAxis:(enum AxisDependency)which;
- (NSNumberFormatter * __null_unspecified)scatterChartDefaultRendererValueFormatter:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartYMin:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMax:(ScatterChartRenderer * __nonnull)renderer;
- (float)scatterChartRendererChartXMin:(ScatterChartRenderer * __nonnull)renderer;
- (NSInteger)scatterChartRendererMaxVisibleValueCount:(ScatterChartRenderer * __nonnull)renderer;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
